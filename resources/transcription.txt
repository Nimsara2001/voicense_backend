 Everyone, I feel are safe and doing good. So, in the series of planning, C++ programming language, in the previous video, we have seen arrays in C. In this, we have discussed the concept of arrays, 1D arrays in C. Right? The need of 1D array, what is 1D array, how to declare 1D array, how to initialize 1D array, how to, you know, the memory representation of 1D arrays and how to access elements of those arrays. And based on that, we have discussed 4 out 5 coding problems as well, the code problem. Right? So, now, in this video, we'll see what are multi-dimensional arrays, specially 2D arrays. Right? So, multi-dimensional arrays are having more than one dimension. That is for sure. Right? So, you see, how do you declare 1D array? Just write data type, right? Like this. And A array name and here, size like 5. So, data type, here we write array name and... size of the array. That's it. This is how to declare 1D array. So, now, if you have more than one dimension, so you can declare, you can give like same data type array name, here size 1, size 2 according to the dimension. And up to size n. How many dimension you have? That many size you have to give here. Right? So, like 2D array, 3D arrays. Mostly, we use 2D arrays. Right? So, now, if I take like example of 2D arrays. So, 2D array, it is the simplest form of multi-dimensional arrays. Right? So, how do you declare 2D arrays same data type, array name and only 2 size, size 1, size 2, because we are having only 2 dimension. Right? So, which type of data to be stored? Right? This is our name. And here, you can say the maximum element to be stored in that, array, that size we give. Right? Now, first of all, we will see like what is 2D array, but the need of 2D array we will discuss first. Right? So, if I ask you... I just declare you have to declare an array in which I want to store marks of 15 students. Let's suppose in my class I have... 15 students. So, you simply declare an array of marks, with name marks and size 15. Okay? Fine. Now, I say marks of 15 students, but in 5 subjects. In each subject, I want to store the marks of 15 students. So, one way is what? Either I can say like marks or you can say sub 1 for 15 student, then another array named sub 2 marks for 15 students like this. And you just declare 5 arrays, because you have 5 subjects. Right? Now, you have 5 arrays. But is there any, you know, simple way in which I just have to declare only once? Yeah. We can do this with the help of 2D array. And just add one dimension here only for 5 subjects. That's it. No need to declare 5 times the arrays. Right? That is why we also say that 2D arrays, array of arrays. Right? Because here we are 5 arrays, but in one array I'm going to declare this. So, simply I can say like how to declare that thing, float, name of the array, 5 subjects and 15 students. That's it. Oh, you can also declare something like this. Maybe this question is in your mind like 15 here, 5 here. That is also fine. Okay? But the difference is what I'm going to tell you. So, here also 5 subjects, 15 students or 15 subjects we have and each subject I have, sorry, 15 students. And in 5 subjects I want to store the marks. Right? It's okay. Now, we, so how we can say that this is row. So, if you write the general syntax of declaring 2D array, then simply we write here data type, array name and here we write row size and the first one is, so the first one is row size. The second one is column size. Right? This you need to take care. So, in this case we have 5 rows, 15 columns. In this case we have 15 rows and 5 columns. Right? First would be row size. Second dimension would be column size. That is for sure. Right? Now, have you, you know, if I declare this, this array. So, how do you think? Like if you say how you can visualize this array, how this array is to be stored in memory. So, generally we visualize this thing something like this. Like rather than 15, let's take only 5 subjects and or we can say let's take a smaller number, 2 and 3 only. Right? 2 subject and 3 students, that's it. I have a very special subject, 2 special subject in which I only 3 students. Like maybe I'm guiding PhD students. Right? So, now for second ways here we can guide them 2 and 3. So, how do you visualize this thing? In memory. So, you're not in memory, but how we visualize this thing. First is row size. So, 2 rows. Column size. So, 3 columns. Something like this. Right? And index should be starred, you know, array index start from 0. Right? So, 0, 1, 0, 1, 2. These are rows and these are columns. Something like this. Right? This is how we see. So, we can say 2D arrays. We can also see this in a matrix form or tabular form. Right? It's nothing but a table or we can say it's like a matrix also. Matrix is something like this. So, in matrix also we store data something in this form only. So, that is matrix also. Right? Now, if you want to access the element of 2D array then we need more than one index. In one day array we need only one index. There's 0, 1, 2, 3, 4. But here if you want to access this element you need 2 index. Which row and which column? You need to specify 2 thing. Which row and which column? Right? So, row index is 0 and column index is also 0. For this element row is 0, column is 1. For this 0, 2. For this 1, 0, 1, 1 and 1, 2. So, more than one index you need. Basically 2 index you need if you are accessing any element from 2D array. Right? But this is not how exactly in memory the data is to be stored of 2D array. No, no, no, no, because memory is it's like a long tape of, you know, bytes in a sequence. So, they can store data in matrix form or tabular form. But how the data should be stored that I'm going to show you in detail in the next video. But for now in this video for this video let me just tell you and breathe. This first row would be stored here continuously. Then the second row would be stored. Row wise, then I should be stored. But in detail we will discuss in next video the memory representation and accessing work the array elements like 2D array elements. Right? So, this is the pictorial representation. If the array is something like this. So, nothing change here column size is 3 and rows sorry rows are 3, rows are 3, columns are 2, 0, 1, 2, 0, 1. Right? So, in this case suppose 3 student. So, here I have student in this dimension and 2 subjects. So, in this dimension I have subject. But here in this dimension I have student and here I have subject it's okay. You can do it either this or this it's fine. Right? But first it would be row size second would be column size. This you need to take care. Right? So, this is the difference between these two declaration. Right? Now if you want to calculate how many element you can store or how much memory how many bytes are to be located for the particular array. So, if this is the case first one. So, how many elements we can store? 2 row and each show we have 3 columns. So, it means we can store 2 into 3 total 6 elements in the array. So, the memory manager has to allocate bytes for memory for 6 elements and it is a float type. So, each element will take 4 bytes. So, 6 into 4 that is 24 bytes would be a located for the array. For this array also 3 into 2 6 6 into 4 24 byte would be a located. Right? Okay. This is how I am going to tell you I am going to show you like if you want to calculate the size of these things and we have a size of operator also. This thing practically I will show you. Right? We will calculate the size we will show the size also with the help of program using size of operator. Right? This is our first program and I will show you with the help of program how to declare array how to initialize array. It is okay. Now, the declaration is I think almost clear to you guys. If you are just only you know if you are only declaring the array you are not initializing the array then you have to give both the size column size and row size. Right? But yeah we can skip this row size this can be empty. But that case is different. Right? For now if you are just declaring something like this you have to specify both row size and column size. So I hope the declaration is clear to you guys and have to calculate the number of elements and how much memory will be allocated to the 2D array. Right? And the pictorial representation have you visualized 2D array. Right? Have two access that in detail I will show you next video. Now next thing is how to initialize 2D array. So same as 1D array we have two you know methods like we can initialize this at compile time and at runtime. So at compile time just we give the initializer list at compile time only and at runtime if you want to initialize it if you want to ask the numbers the element of this array from the user at runtime then we use loops. Right? So first we will see how to initialize it at compile time. Right? Don't worry I'll you know show you this thing with help program as well. So while declaring only like float marks 2 and 3 here only I can this is 2 sorry 2 and 3 here only I can give the data the elements the marks this is known as the initializer list using initializer list. So have you been initialized this thing we can do in three ways. So first way how many elements we can store 3 into 2 six elements. So just give six elements. So you just give the marks six elements we can store just give six marks. Right? So how this is going to be stored in memory now here this is one so first two rows so first we'll take the first value and that like this is the array pictorial representation of that is the first is 56.95. Next in the same room 10.298.99 three elements we have three volumes then next row 95.91 like this. So this is first row this is second row or one more clear way is you can do something like this initializer list let me just write down here like this. Next it list we can use like within this we can just have one more like list and only three elements for first row and three elements for second row. So this is I think more clear way here we can directly say like this is row one and these element would be stored in row two right or something like this also we can do like here just this bracket this would be same and in the next we can just store the marks then in matrix room 91 91 and that's it this also you can write down this bracket then in next line this thing in next line write down this thing then in next line this bracket and this close right this also we can do so this is more clear way right like row one and row two so this is how you can initialize that compile time with initializer list this is known as initializer list and if you know this thing here we can skip this row cycle here also we can skip this row size in this case also we can skip row size because ultimately we know okay row size is not there but we have three columns so we'll take first element one two three three columns would be there that is for sure now if there is next element after the three values so that will be stored definitely in the next row one two three so ultimately row would be two row size would be automatically calculated you can skip row size but you cannot skip column size if you give here row size and no column size that would be you know confusing because 56 95 this this this I don't know how many columns so in one row I don't know how many columns are there right so this is the case this would be given error but that this is fine sorry this is fine you can skip row size right but here if I take this example like three and two so half the state is to be stored we have two columns so this in first row these two in second row these two in third row like this right I hope this is clear to you guys now if I write something like this if this is the case error name is a I am at specified row size columns are three and only one value zero then how many rows would be there here so zero would be stored zero would be stored zero would be stored because there are three columns then nothing else this is like one day right if I write something like this rather than this zero I write something like this zero one two in that case in that case also zero one two would be stored because there are three columns but we don't know the row so is there any element no no element so this also will act as a one day array that's it right but if I write something like this minus two now in this case three columns so zero one two would be stored next we have an element yes so that would be next row so definitely there would be two rows and remaining element would be zero zero initializers zero so this is how this would be initialized right and if you want to store this zero two in first row two two in second row so just do something like this explicitly you have to tell like this so now this is first row this is second row we can clearly see right so here zero one and two minus two so remaining would be zero zero I hope you are getting these things right okay now this is like compile time initialization at runtime at runtime how you can initialize so let's take a simple array we have two rows and three columns so we have something like this two rows and three columns index would be like this so obviously we need nested loops to initialize to you know take value from the user when we use loops so we use two loops we require nested loops because two dimensions so we need two loops if they are three dimension we leave three loops right one group is for rows one group is for columns I have already discussed in a video the need of nested loops in C programming language that playlist also and C++ also right so if you deal with something like this with matrix or tabular form obviously you need one loop for to increase the row and one is for two driver's columns right so first this first row within this we have three columns so I will take I and J2 variable so let's take I is equal to zero and I less than I would traverse number of rows so after loop would be for rows and inner loop would be for columns right less than two number of rows I row size two within this we have J less than column and J++ and within this we can simply take the value A R R first is I second is J because I is handling row and J is handling column so first is row second is column definitely right that's it right so first thing we have an element like I we have J so I is zero at first right condition tree yes we will enter here now J is zero condition tree yes we will enter here now here R of I J now I is zero J is zero zero means this we can access this memory location so whatever you will enter that element would be stored here suppose I'm entering minus one now we are within this inner loop so J plus plus J becomes one so condition tree yes we will enter here I still one I is zero and J is one so zero one means this location so whatever you will enter that would be stored here so let's suppose I'm entering one like this now J plus plus plus J is two now zero two so next element suppose I'm entering 10 that would be stored here now J plus plus J becomes three but this condition is not true so exit from inner loop but still we are in outer loop so I plus plus now I becomes one condition tree yes enter here again J would be initialized with zero now for I one first row also this process would be repeated and pre-elemented like this we can you know take input from the user using loops I hope you clear with the front row of nested loops right so but how actually these elements are to be stored that we will see next video in memory and how to access these element that also I'll show in next video right now let's you know discuss this thing practically and I'll show you programs as well okay so let's create a new file here and okay now in main function let's declare first a 2d array so simple let's take any element ARR or if you take like float marks float marks of I have only like two subject and I have suppose three students right so this is how we can declare and if I write here another let's suppose int this is another array and suppose we have one more L the data type is care because type can be anything int care float double right so I'm taking care so care and just I'm taking like name 20 or 15 so if you want to calculate the size of these arrays then we have a size of hopefully I have told you this is just the declaration over here like memory has been also located for these thing right so we can say it's definition actually more precisely I say I said and definition because in declaration we just declare no memory allocation is there but here memory has been allocated right so now if I want to print like see how size of array 1 that is marks so we have a size of operator size of just give the name of that array marks and obviously if you want to print bytes as well so you have to write down here bytes and for new line pndm right same for next array and next array to destroy this out with me right so like this we have calculated the size of each array first calculate this right and then run this and tell your answer let's run this size of array marks 1 is 24 bytes second 48 byte and third 15 byte so first is 24 byte 3 into 2 6 6 into 4 24 next 4 into 3 12 12 into 4 48 byte right because int also take 4 byte actually depends on compiler so in my compiler it takes 4 bytes care care take only 1 byte so 15 bytes only right so this is how we can calculate the size also we can see and if you now declare so the initialize the array at compile time only so equal to here we can give the initializer list only so this is how we can write down marks or second way is if I want to write if I want to write down something like this like in bracket so 3 rows and 4 columns so in each row I have 4 values so first row let's give 4 values right then this is for second row 4 values this is for third row 4 values and this is for fourth row in fourth row I'm just giving only one value sorry we have only 3 row right so we have only 3 row so in third row I'm just giving 2 values it's okay first row with this second row with this third row would be 2 3 0 0 right so this also we can do right and yeah third this is like simple example of 1d array so let's remove this right so that is fine if you remove this size that is also fine you will not get any error right but if you remove this suppose here I'm just removing this 3 let's see what is happening here see you got a red line here an array may not have an element of this type right so if I run this whatever you will get here so in line number 5 we have declaration of marks as multi-dimensional array must have bounds for all the dimension except the first except the first so first is row you can skip this one but other than that if they run here we have 2d arrays so other than this we have only one dimension so you have to specify this if you have 3d array then 1 2 3 3 dimension so first you can skip but other than first you have to give for 2 you have to give the limit where you can say that bound right so this is being given you an error so let's 2 and here we have a 3 now you just try out the different different declaration I have you know told you what you are discussing this thing you just try out all the declaration and just calculate the size of that array right now how to initialize the array if I don't want to initialize this array head compile line so if this is not the case then you have to specify the row size here right incomplete type is not allowed right because we are not initializing so how to calculate the size because this is actually definition the memory manager is going to allocate memory based on this so how to calculate how many bytes to be allocated because there is no row size you know we know the number of columns i4 but we don't know number of rows so how to calculate the size now how to how to allocate the number of bytes so if you have to specify so let's suppose 2 you have only 2 now it will give it will not give any error and now let's initialize this with initialize at runtime with loops so we have one variable to traverse or to hold the rows so number of row the row size is 2 so this would be like this now inner loop would be for columns so obviously initialize with 0 index would be 0 less than column sizes 4 it's it should not be like less than equal to 4 index should be always less than the size not less than equal to right now within this simply with c in we can take the value name of the arrays a first i second is j first is row so first obviously this i you have to specify next element is j for column we have taken j so j right if i run this let's run this and see what kind of output we are getting so it will just ask the elements so how many elements we need to give here see 4 into 2 8 elements it will accept only 8 element so 1 2 3 4 5 6 7 8 and that's it it is not printing anything obviously we are not accessing the those elements you are just taking the values from the user so this is how we can take value from the user right with nested loops this is at runtime initialize it in at runtime so i hope till now this is clear if you have any doubt you can just let me know in comment section so in the next video we will see my very representation of 2d array and how to access elements of 2d array right so now i'll in the next row little by take it